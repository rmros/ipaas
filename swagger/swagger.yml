swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /api/v1
paths:
  /clusters/{cluster}/namespaces/:
    get:
      tags:
      - clusters/:cluster/namespaces
      description: list namespace
      operationId: SpaceController.ListSpace server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Space'
    post:
      tags:
      - clusters/:cluster/namespaces
      description: create namespace
      operationId: SpaceController.CreateSpace server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Space'
      responses:
        "201":
          description: ""
          schema:
            $ref: '#/definitions/models.Space'
  /clusters/{cluster}/namespaces/{namespace}:
    get:
      tags:
      - clusters/:cluster/namespaces
      description: get namespace by name
      operationId: SpaceController.GetSpace server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Space'
    delete:
      tags:
      - clusters/:cluster/namespaces
      description: delete namespace
      operationId: SpaceController.DeleteSpace server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/apps/:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/apps
      description: stop app
      operationId: AppController.ListApp server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.App'
    post:
      tags:
      - clusters/:cluster/namespaces/:namespace/apps
      description: create app
      operationId: AppController.CreateApp server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.App'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.App'
  /clusters/{cluster}/namespaces/{namespace}/apps/{app}:
    delete:
      tags:
      - clusters/:cluster/namespaces/:namespace/apps
      description: delete config
      operationId: AppController.DeleteApp server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/apps/{app}/{verb}:
    put:
      tags:
      - clusters/:cluster/namespaces/:namespace/apps
      description: start stop redploy app
      operationId: AppController.OperationApp server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/configs/:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/configs
      description: list config
      operationId: ConfigController.ListConfig server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Storage'
    post:
      tags:
      - clusters/:cluster/namespaces/:namespace/configs
      description: create config
      operationId: ConfigController.CreateConfig server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Config'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Config'
  /clusters/{cluster}/namespaces/{namespace}/configs/{config}:
    put:
      tags:
      - clusters/:cluster/namespaces/:namespace/configs
      description: add config data
      operationId: ConfigController.AddConfigData server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/.map[string]string'
      responses:
        "200":
          description: ""
    delete:
      tags:
      - clusters/:cluster/namespaces/:namespace/configs
      description: delete config
      operationId: ConfigController.DeleteConfig server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/configs/{config}/{key}:
    delete:
      tags:
      - clusters/:cluster/namespaces/:namespace/configs
      description: delete config data
      operationId: ConfigController.AddConfigData server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/containers/:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/containers
      description: query all pod in the current namespace
      operationId: ContainerController.ListContainer server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Container'
    put:
      tags:
      - clusters/:cluster/namespaces/:namespace/containers
      description: recreate pod
      operationId: ContainerController.ReCreateContainer server
      parameters:
      - in: body
        name: names
        description: the storage names who need to delete
        required: true
        type: array
        items:
          type: string
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/services/:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/services
      description: stop app
      operationId: ServiceController.ListService server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Service'
    post:
      tags:
      - clusters/:cluster/namespaces/:namespace/services
      description: create app
      operationId: ServiceController.CreateService server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Service'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Service'
  /clusters/{cluster}/namespaces/{namespace}/services/{service}:
    delete:
      tags:
      - clusters/:cluster/namespaces/:namespace/services
      description: create namespace
      operationId: ServiceController.DeleteService server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/services/{service}/{verb}:
    put:
      tags:
      - clusters/:cluster/namespaces/:namespace/services
      description: start stop reqploy restart scale expansion
      operationId: ServiceController.OperatorService server
      responses:
        "200":
          description: ""
  /clusters/{cluster}/namespaces/{namespace}/services/{service}/events:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/services
      description: list service events
      operationId: ServiceController.ListServiceEvents server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Event'
  /clusters/{cluster}/namespaces/{namespace}/services/{service}/metrics:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/services
      description: list service events
      operationId: ServiceController.ListServiceMetrics server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/.map[string]interface{}'
  /clusters/{cluster}/namespaces/{namespace}/storages/:
    get:
      tags:
      - clusters/:cluster/namespaces/:namespace/storages
      description: list storage
      operationId: StorageController.ListStorage server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Storage'
    post:
      tags:
      - clusters/:cluster/namespaces/:namespace/storages
      description: create storage
      operationId: StorageController.CreateStorage server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Storage'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Storage'
    delete:
      tags:
      - clusters/:cluster/namespaces/:namespace/storages
      description: delete storage
      operationId: StorageController.DeleteStorage server
      parameters:
      - in: body
        name: names
        description: the storage names who need to delete
        required: true
        type: array
        items:
          type: string
      responses:
        "200":
          description: ""
  /clusters/{cluster}/nodes/:
    get:
      tags:
      - clusters/:cluster/nodes
      description: list node
      operationId: NodeController.ListNode server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/.Node'
  /clusters/{cluster}/nodes/{name}:
    get:
      tags:
      - clusters/:cluster/nodes
      description: get node
      operationId: NodeController.GetNode server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Node'
  /clusters/{cluster}/nodes/{node}:
    put:
      tags:
      - clusters/:cluster/nodes
      description: make node to scheduleable or not
      operationId: NodeController.ReCreateContainer server
      parameters:
      - in: query
        name: scheduleable
        description: true or false
        required: true
        type: boolean
      responses:
        "200":
          description: ""
  /clusters/{cluster}/nodes/{node}/containers:
    get:
      tags:
      - clusters/:cluster/nodes
      description: list node po
      operationId: NodeController.ListContainer server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Container'
  /clusters/{cluster}/nodes/{node}/labels/{verb}:
    put:
      tags:
      - clusters/:cluster/nodes
      description: add delete label
      operationId: NodeController.LabelOperator server
      parameters:
      - in: query
        name: scheduleable
        description: schedule or not
        required: true
        type: boolean
      responses:
        "200":
          description: ""
  /teams/:
    get:
      tags:
      - teams
      description: list team
      operationId: TeamController.ListTeam server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Team'
    post:
      tags:
      - teams
      description: create team
      operationId: TeamController.CreateTeam server
      parameters:
      - in: body
        name: body
        description: body for team content
        required: true
        schema:
          $ref: '#/definitions/models.Team'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Team'
  /teams/{team}:
    delete:
      tags:
      - teams
      description: delete team
      operationId: TeamController.DeleteTeam server
      responses:
        "200":
          description: ""
  /teams/{team}/spaces:
    post:
      tags:
      - teams
      description: add namespace to team
      operationId: TeamController.AddSpace server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Space'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Space'
  /teams/{team}/users:
    get:
      tags:
      - teams
      description: get users from Team
      operationId: TeamController.GetUsers server
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.User'
    post:
      tags:
      - teams
      description: add users to Team
      operationId: TeamController.AddUsers server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /users/:
    get:
      tags:
      - users
      description: list all user
      operationId: UserController.list server
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    put:
      tags:
      - users
      description: create a user
      operationId: UserController.CreateUser server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
    post:
      tags:
      - users
      description: create a user
      operationId: UserController.Create server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    delete:
      tags:
      - users
      description: delete a user
      operationId: UserController.Delete server
      parameters:
      - in: body
        name: names
        description: body for user content
        required: true
        type: array
        items:
          type: string
      responses:
        "200":
          description: ""
  /users/login:
    post:
      tags:
      - users
      description: Login server by username and password
      operationId: UserController.Login server
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /users/logout:
    delete:
      tags:
      - users
      description: Login server by username and password
      operationId: UserController.Logout server
      responses:
        "200":
          description: ""
definitions:
  .EnvVar:
    type: object
  .Model:
    type: object
  .Node:
    type: object
  .NodeSystemInfo:
    type: object
  .ServicePort:
    type: object
  .Time:
    type: object
  .map[string]interface{}:
    type: object
  .map[string]string:
    type: object
  models.App:
    title: App
    type: object
    properties:
      appStatus:
        type: integer
        format: int64
      createAt:
        type: string
        format: string
      description:
        type: string
      external:
        type: string
      id:
        type: integer
        format: int32
      intanceCount:
        type: integer
        format: int64
      name:
        type: string
      nameSpace:
        type: string
      serviceCount:
        type: integer
        format: int64
      services:
        type: array
        items:
          $ref: '#/definitions/models.Service'
  models.Config:
    title: Config
    type: object
    properties:
      data:
        additionalProperties:
          type: string
      name:
        type: string
      namespace:
        type: string
  models.Container:
    title: Container
    type: object
    properties:
      appName:
        type: string
      createAt:
        type: string
        format: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      status:
        type: string
      url:
        type: string
  models.Event:
    title: Event
    type: object
    properties:
      lastTimestamp:
        $ref: '#/definitions/metav1.Time'
      message:
        type: string
      reason:
        type: string
      type:
        type: string
  models.Node:
    title: Node
    type: object
    properties:
      containerCnt:
        type: integer
        format: int64
      containers:
        type: array
        items:
          $ref: '#/definitions/models.Container'
      cpuAllocatable:
        type: integer
        format: int64
      cpuCapacity:
        type: integer
        format: int64
      cpuUsage:
        type: integer
        format: int64
      createT_at:
        $ref: '#/definitions/metav1.Time'
      diskPressure:
        type: boolean
      hostName:
        type: string
      internal:
        type: string
      matserOrslave:
        type: string
      memoryAllocatable:
        type: integer
        format: int64
      memoryCapacity:
        type: integer
        format: int64
      memoryPressure:
        type: boolean
      memoryUsage:
        type: integer
        format: int64
      podCapacity:
        type: integer
        format: int64
      schedulable:
        type: boolean
      status:
        type: boolean
      version:
        $ref: '#/definitions/v1.NodeSystemInfo'
  models.Service:
    title: Service
    type: object
    properties:
      appName:
        type: string
      cmds:
        type: array
        items:
          type: string
      cpu:
        type: string
      envs:
        type: array
        items:
          $ref: '#/definitions/v1.EnvVar'
      external:
        type: string
      image:
        type: string
      instanceCount:
        type: integer
        format: int64
      loadbalanceIP:
        type: string
      memory:
        type: string
      name:
        type: string
      nodeName:
        type: string
      ports:
        type: array
        items:
          $ref: '#/definitions/v1.ServicePort'
      status:
        type: integer
        format: int64
      storage:
        $ref: '#/definitions/models.Storage'
      type:
        type: integer
        format: int64
      volumes:
        type: array
        items:
          $ref: '#/definitions/models.Volume'
  models.Space:
    title: Space
    type: object
    properties:
      creationTime:
        type: string
        format: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      teamID:
        type: string
      type:
        type: integer
        format: int64
  models.Storage:
    title: Storage
    type: object
    properties:
      accessModes:
        type: string
      createAt:
        type: string
        format: string
      id:
        type: integer
        format: int32
      mountPath:
        type: string
      name:
        type: string
      namespace:
        type: string
      serviceName:
        type: string
      size:
        type: string
      status:
        type: string
      type:
        type: string
      used:
        type: boolean
  models.Team:
    title: Team
    type: object
    properties:
      creatorID:
        type: integer
        format: int32
      description:
        type: string
      name:
        type: string
      users:
        type: array
        items:
          $ref: '#/definitions/models.User'
  models.User:
    title: User
    type: object
    properties:
      Teams:
        type: array
        items:
          $ref: '#/definitions/models.Team'
      active:
        type: integer
        format: int32
      apiToken:
        type: string
      company:
        type: string
      createdAt:
        type: string
        format: string
      deletedAt:
        $ref: '#/definitions/time.Time'
      displayname:
        type: string
      email:
        type: string
      id:
        type: integer
        format: int32
      loginFrequency:
        type: integer
        format: int64
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: integer
        format: int32
      type:
        type: integer
        format: int64
      updatedAt:
        type: string
        format: string
  models.Volume:
    title: Volume
    type: object
    properties:
      configMapKey:
        type: array
        items:
          type: string
      configMapName:
        type: string
      mountPath:
        type: string
      type:
        type: integer
        format: int64
tags:
- name: users
  description: |
    UserController user controller
- name: teams
  description: |
    TeamController team controller
- name: clusters/:cluster/namespaces
  description: |
    SpaceController space controller
- name: clusters/:cluster/namespaces/:namespace/apps
  description: |
    AppController app api server
- name: clusters/:cluster/namespaces/:namespace/services
  description: |
    ServiceController the service controller
- name: clusters/:cluster/namespaces/:namespace/storages
  description: |
    StorageController storage controller
- name: clusters/:cluster/namespaces/:namespace/configs
  description: |
    ConfigController the config controller
- name: clusters/:cluster/namespaces/:namespace/containers
  description: |
    ContainerController the container controller
- name: clusters/:cluster/nodes
  description: |
    NodeController node api server
